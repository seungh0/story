broker.id=1
listeners=PLAINTEXT://:9092
num.network.threads=3 # 네트워크 요청을 처리하는 Thread의 개수
num.io.threads=8 # 서버에서 request를 처리할 때 사용하는 스레드 수
socket.send.buffer.bytes=102400 # 네트워크 요청을 처리할 소켓 서버가 사용하는 수신 메모리 사이즈
socket.receive.buffer.bytes=102400 # 네트워크 요청을 처리할 소켓 서버가 사용하는 송신 메모리 사이즈
socket.request.max.bytes=104857600 # 서버가 받을 수 있는 최대 요청 사이즈이며, JAVA의 Heap 보다 작게 설정해야 함.
log.dirs=/home/logs/kafka # 로그 파일을 저장할 쉼표로 구분된 디렉터리 목록.
num.partitions=1 # 토픽당 파티션의 수
num.recovery.threads.per.data.dir=1 # 기동 시 로그 복구와, 셧 다운 시 플러시에 사용할 데이터 디렉토리 당 스레드 수. 장애에 빠르게 대응하고자 한다면 높은 값을 설정해야함.

log.cleanup.policy=delete
log.retention.hours=72
log.retention.bytes=1073741824
log.segment.bytes=1073741824 # 로그 세그먼트 파일의 최대 크기. 이 크기에 도달하면 새 로그 세그먼트가 생성됨.
log.retention.check.interval.ms=300000 # 로그를 삭제하기 위한 check 간격으로 ms단위임.
zookeeper.connect=127.0.0.1:2181
zookeeper.connection.timeout.ms=18000
group.initial.rebalance.delay.ms=0 # 그룹 코디네이터가 새 그룹에서 처음 리밸런스(리더 역할을 할 클라이언트를 선출하며 파티션을 분배하는 과정)를 수행하기 전에, 더 많은 컨슈머가 그룹에 들어올 수 있도록 기다리는 시간.

offsets.topic.replication.factor=3 # 오프셋 토픽(__consumer_offsets)의 replication factor를 지정
default.replication.factor=3 # 자동으로 생성된 토픽에 대한 기본 복제 인수
min.insync.replicas=2 # 프로듀서가 acks=all(-1)로 설정하여 메시지를 보낼 때, write를 성공하기 위한 최소 복제본의 수.
transaction.state.log.replication.factor=3 # 트랜잭션 토픽(__transaction_state)의 replication factor를 지정
transaction.state.log.min.isr=1 # 트랜잭션 토픽에 대한 min.insync.replicas 설정
acks=all # 프로듀서가 kafka에 데이터를 전달하고 데이터를 잘 받았는지 확인하는 옵션. (0, 1, all)
delete.topic.enable=true
auto.create.topics.enable=false # 브로커 서버의 토픽 자동 생성을 활성화 함.
controllered.shutdown.enable=true # graceful shutdown
